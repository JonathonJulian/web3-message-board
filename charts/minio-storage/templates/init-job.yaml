---
# yamllint disable rule:syntax
{{- /* Define a sensible default for initJob if not provided */}}
{{- $initJobEnabled := .Values.initJob.enabled | default true -}}
{{- if $initJobEnabled}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{.Release.Name}}-volume-init
  namespace: {{.Release.Namespace}}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: {{.Release.Name}}-volume-init
    app.kubernetes.io/instance: {{.Release.Name}}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{.Release.Name}}-volume-init
        app.kubernetes.io/instance: {{.Release.Name}}
    spec:
      # Ensure this job runs on the worker node where we're creating directories
      nodeSelector:
        kubernetes.io/hostname: worker0
      restartPolicy: Never
      containers:
        - name: volume-init
          image: {{.Values.initJob.image | default "busybox:latest"}}
          imagePullPolicy: {{.Values.initJob.imagePullPolicy | default "IfNotPresent"}}
          command: ["/bin/sh", "-c"]
          {{- if .Values.initJob.args }}
          args:
{{ toYaml .Values.initJob.args | indent 12 }}
          {{- else }}
          args:
            - |
              # Create Minio directory with appropriate permissions
              mkdir -p /storage/minio
              chmod -R 777 /storage/minio
              echo "MinIO volume initialization completed successfully!"
          {{- end }}
          volumeMounts:
            - name: storage
              mountPath: /storage
          securityContext:
            runAsUser: 0
      volumes:
        - name: storage
          hostPath:
            path: /var/lib/rancher/k3s/storage
            type: DirectoryOrCreate
{{- end}}
# yamllint enable rule:syntax