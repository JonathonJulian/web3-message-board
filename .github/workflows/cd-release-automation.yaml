---
name: Release Automation
run-name: ${{ github.event.inputs.release_type || 'Auto' }} Release ${{ github.event.inputs.version && format('v{0}', github.event.inputs.version) || '(version to be determined)' }}

on:
  push:
    branches: [main]
  repository_dispatch:
    types: [docker-build-complete]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g. 1.0.0)"
        required: false
        type: string
      release_type:
        description: "Type of release"
        type: choice
        options:
          - Major
          - Minor
          - Patch
        default: "Patch"
        required: true
      create_github_release:
        description: "Create GitHub Release"
        type: boolean
        default: true
      deploy_artifacts:
        description: "Deploy artifacts"
        type: boolean
        default: true
      build_docker:
        description: "Build Docker images"
        type: boolean
        default: true
      build_arm:
        description: "Build ARM64 architecture"
        type: boolean
        default: false

# Add explicit write permissions
permissions:
  contents: write
  pull-requests: write
  discussions: write
  actions: write

jobs:
  # Analyze commits to determine version bump type
  analyze-commits:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.analyze.outputs.release_type }}
      has_new_commits: ${{ steps.analyze.outputs.has_new_commits }}
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Analyze commits for release type
        id: analyze
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ github.token }}
          skip-version-file: true
          skip-git-pull: true
          skip-commit: true
          output-file: false

      - name: Set has_new_commits output
        id: set_outputs
        run: |
          if [ "${{ steps.analyze.outputs.skipped }}" == "true" ]; then
            echo "has_new_commits=false" >> $GITHUB_OUTPUT
          else
            echo "has_new_commits=true" >> $GITHUB_OUTPUT
            echo "release_type=${{ steps.analyze.outputs.type }}" >> $GITHUB_OUTPUT
          fi

  # Determine and bump the version
  determine-version:
    runs-on: ubuntu-latest
    needs: [analyze-commits]
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && needs.analyze-commits.outputs.has_new_commits == 'true')
    outputs:
      version: ${{ steps.bump-version.outputs.new_version }}
      tag: ${{ steps.bump-version.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      # If version is provided directly via input, use it
      - name: Set manual version
        id: manual_version
        if: github.event.inputs.version != ''
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Validate version format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must follow semantic versioning (X.Y.Z)"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      # Otherwise use automatic versioning
      - name: Bump version and create tag
        id: bump-version
        if: github.event.inputs.version == ''
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ github.token }}
          default_bump: ${{ needs.analyze-commits.outputs.release_type || github.event.inputs.release_type || 'patch' }}
          release_branches: main
          create_annotated_tag: true
          tag_prefix: v
          dry_run: true

      # Use the correct version output
      - name: Set final version
        id: set_version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "version=${{ steps.manual_version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=${{ steps.manual_version.outputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.bump-version.outputs.new_version }}" >> $GITHUB_OUTPUT
            echo "tag=${{ steps.bump-version.outputs.new_tag }}" >> $GITHUB_OUTPUT
          fi

  # Prepare the release
  prepare:
    name: Prepare Release
    needs: [determine-version]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.determine-version.outputs.version }}
      tag: ${{ needs.determine-version.outputs.tag }}
      actor: ${{ github.actor }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Create release branch
        id: create-branch
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          branch: "release/v${{ needs.determine-version.outputs.version }}"

      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: "release/v${{ needs.determine-version.outputs.version }}"

      - name: Update version in package files
        uses: EndBug/add-and-commit@v9
        with:
          add: "**/package.json"
          author_name: "GitHub Actions"
          author_email: "actions@github.com"
          message: "chore: bump version to ${{ needs.determine-version.outputs.version }}"
          push: true
          default_author: github_actions
          pathspec_error_handling: ignore

      - name: Generate release notes
        uses: release-drafter/release-drafter@v5
        with:
          tag: ${{ needs.determine-version.outputs.tag }}
          name: "Release ${{ needs.determine-version.outputs.tag }}"
          version: ${{ needs.determine-version.outputs.version }}
          disable-autolabeler: true
          commitish: "release/v${{ needs.determine-version.outputs.version }}"
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ github.token }}

  # Trigger component builds
  trigger-builds:
    name: Trigger Component Builds
    needs: [prepare, determine-version]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger API Build
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ github.token }}
          event-type: start-api-build
          client-payload: '{"version": "${{ needs.prepare.outputs.version }}", "actor": "${{ needs.prepare.outputs.actor }}", "create_release": false}'

      - name: Trigger Frontend Build
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ github.token }}
          event-type: start-frontend-build
          client-payload: '{"version": "${{ needs.prepare.outputs.version }}", "actor": "${{ needs.prepare.outputs.actor }}", "create_release": false}'

      - name: Build Triggers Summary
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ github.token }}
          context: 'Component Builds'
          description: 'API and Frontend builds triggered'
          state: 'success'
          sha: ${{ github.sha }}

  # Wait for component builds to complete
  wait-for-builds:
    name: Wait for Component Builds
    needs: [prepare, determine-version, trigger-builds]
    runs-on: ubuntu-latest
    steps:
      - name: Wait for builds to complete
        run: |
          echo "Waiting for builds to complete (60 seconds)..."
          sleep 60
          echo "Builds should now be complete or in progress."

  # Create GitHub Release with all artifacts
  github-release:
    name: Create GitHub Release
    needs: [prepare, determine-version, wait-for-builds]
    if: >
      (github.event_name == 'workflow_dispatch' && github.event.inputs.create_github_release == 'true') ||
      github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ format('release/v{0}', needs.prepare.outputs.version) }}
          token: ${{ github.token }}

      # Download all artifacts in one step
      - name: Download all workflow artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow_conclusion: success
          if_no_artifact_found: warn
          path: ./artifacts
          check_artifacts: true
          search_artifacts: true

      - name: List collected artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f | sort

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: Release ${{ needs.prepare.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Generate release summary
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: 1
          body: |
            ## ğŸš€ Release ${{ needs.prepare.outputs.tag }} is now available

            Version ${{ needs.prepare.outputs.version }} has been released with all components:

            - API
            - Frontend

            [View the release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.tag }})

  # Deploy artifacts if requested
  deploy:
    name: Deploy Artifacts
    needs: [prepare, github-release, determine-version]
    if: >
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_artifacts == 'true' && github.event.inputs.create_github_release == 'true') ||
      github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ format('release/v{0}', needs.prepare.outputs.version) }}
          token: ${{ github.token }}

      - name: Deploy to staging
        run: |
          echo "Deploying version ${{ needs.prepare.outputs.version }} to staging environment"
          # Add your deployment commands here

      - name: Notify deployment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: 1
          body: |
            ## ğŸš€ Deployment Complete

            Version ${{ needs.prepare.outputs.version }} has been deployed to staging.
