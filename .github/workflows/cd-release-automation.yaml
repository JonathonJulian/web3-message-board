name: Release Automation
run-name: Release Process ${{ github.event.inputs.release_type != '' && format('({0})', github.event.inputs.release_type) || '(auto)' }}${{ github.event.inputs.deploy_after_release == 'true' && ' + Deploy' || '' }}

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Force release type (patch|minor|major)'
        required: false
        default: ''
        type: choice
        options:
          - patch
          - minor
          - major
      deploy_after_release:
        description: 'Deploy after release creation'
        required: false
        default: false
        type: boolean
      deployment_type:
        description: 'Ansible deployment type (if deploying)'
        required: false
        default: 'ansible-deploy'
        type: choice
        options:
          - ansible-deploy
          - ansible-api
          - ansible-frontend
          - ansible-nginx
          - ansible-logging
          - ansible-security
      api_tag:
        description: 'Custom API tag (overrides auto-versioning, include v prefix)'
        required: false
        type: string
      frontend_tag:
        description: 'Custom Frontend tag (overrides auto-versioning, include v prefix)'
        required: false
        type: string

jobs:
  analyze-commits:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.analyze.outputs.release_type }}
      has_new_commits: ${{ steps.analyze.outputs.has_new_commits }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze commits for release type
        id: analyze
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Get commit messages since the latest tag
          COMMITS=$(git log --pretty=format:"%s" $LATEST_TAG..HEAD)
          COMMIT_COUNT=$(echo "$COMMITS" | grep -v "^$" | wc -l | xargs)
          echo "Found $COMMIT_COUNT new commits since $LATEST_TAG"

          echo "Commit messages since last tag:"
          git log --pretty=format:"%h - %s" $LATEST_TAG..HEAD

          if [ "$COMMIT_COUNT" -eq 0 ] && [ "${{ github.event.inputs.release_type }}" == "" ]; then
            echo "No new commits found and no manual release type specified"
            echo "has_new_commits=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if any changes were made to API or frontend
          API_CHANGES=$(git diff --name-only $LATEST_TAG..HEAD -- api/ | wc -l | xargs)
          FRONTEND_CHANGES=$(git diff --name-only $LATEST_TAG..HEAD -- frontend/ | wc -l | xargs)

          echo "API changes: $API_CHANGES"
          echo "Frontend changes: $FRONTEND_CHANGES"

          # If no changes to API or frontend, skip the release (unless manually triggered)
          if [ "$API_CHANGES" -eq 0 ] && [ "$FRONTEND_CHANGES" -eq 0 ] && [ "${{ github.event.inputs.release_type }}" == "" ]; then
            echo "No changes to API or frontend, skipping release"
            echo "has_new_commits=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "has_new_commits=true" >> $GITHUB_OUTPUT

          # If manual release type was specified, use that
          if [ "${{ github.event.inputs.release_type }}" != "" ]; then
            echo "Using manually specified release type: ${{ github.event.inputs.release_type }}"
            echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for breaking changes
          if echo "$COMMITS" | grep -q -i "BREAKING CHANGE:" || echo "$COMMITS" | grep -q -i "^break: " || echo "$COMMITS" | grep -q -i "^breaking: "; then
            echo "Major release detected due to breaking changes"
            echo "release_type=major" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for features
          if echo "$COMMITS" | grep -q -i "^feat: " || echo "$COMMITS" | grep -q -i "^feature: "; then
            echo "Minor release detected due to new features"
            echo "release_type=minor" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Default to patch
          echo "Patch release detected (default for bug fixes, docs, etc.)"
          echo "release_type=patch" >> $GITHUB_OUTPUT

      - name: Generate analysis summary
        if: steps.analyze.outputs.has_new_commits == 'true'
        run: |
          # Extract some example commits to display
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMIT_EXAMPLES=$(git log --pretty=format:"- %h %s" $LATEST_TAG..HEAD | head -5)
          COMMIT_COUNT=$(git log --pretty=format:"%h" $LATEST_TAG..HEAD | wc -l | xargs)

          # Count changes in each component
          API_CHANGES=$(git diff --name-only $LATEST_TAG..HEAD -- api/ | wc -l | xargs)
          FRONTEND_CHANGES=$(git diff --name-only $LATEST_TAG..HEAD -- frontend/ | wc -l | xargs)

          # Create summary
          echo "## 🔍 Commit Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ **Previous Tag** | $LATEST_TAG |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 **New Commits** | $COMMIT_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🖥️ **API Changes** | $API_CHANGES files |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 **Frontend Changes** | $FRONTEND_CHANGES files |" >> $GITHUB_STEP_SUMMARY
          echo "| 📈 **Release Type** | ${{ steps.analyze.outputs.release_type }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.release_type }}" != "" ]; then
            echo "| 🔧 **Bump Mode** | Manual (user specified) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔧 **Bump Mode** | Automatic (based on commit messages) |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### 📝 Sample Commits" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "$COMMIT_EXAMPLES" >> $GITHUB_STEP_SUMMARY
          if [ "$COMMIT_COUNT" -gt 5 ]; then
            echo "... and $(($COMMIT_COUNT - 5)) more" >> $GITHUB_STEP_SUMMARY
          fi
          echo "```" >> $GITHUB_STEP_SUMMARY

  bump-version:
    needs: analyze-commits
    if: needs.analyze-commits.outputs.has_new_commits == 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver-bump.outputs.new_version }}
      new_tag: ${{ steps.semver-bump.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version and push tag
        id: semver-bump
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ needs.analyze-commits.outputs.release_type }}
          release_branches: main
          tag_prefix: v

      - name: Display created version
        run: |
          echo "::notice::🏷️ Created new version tag: ${{ steps.semver-bump.outputs.new_tag }}"
          echo "::notice::📦 Version: ${{ steps.semver-bump.outputs.new_version }}"
          echo "::notice::📋 Type: ${{ needs.analyze-commits.outputs.release_type }}"

      - name: Generate version bump summary
        run: |
          echo "## 🏷️ Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Version Information" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔖 **New Tag** | ${{ steps.semver-bump.outputs.new_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 **Version** | ${{ steps.semver-bump.outputs.new_version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📈 **Bump Type** | ${{ needs.analyze-commits.outputs.release_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔙 **Previous Tag** | ${{ steps.semver-bump.outputs.previous_tag || 'None' }} |" >> $GITHUB_STEP_SUMMARY

          echo "### 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tag created and pushed to the repository" >> $GITHUB_STEP_SUMMARY
          echo "✅ Component builds will be triggered automatically" >> $GITHUB_STEP_SUMMARY
          echo "✅ A GitHub release will be created when builds complete" >> $GITHUB_STEP_SUMMARY

  trigger-builds:
    name: Trigger Component Builds
    needs: [bump-version]
    if: needs.analyze-commits.outputs.has_new_commits == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release branch
        run: |
          # Create and checkout release branch
          git checkout -b release/v${{ needs.bump-version.outputs.new_version }}

          # Update package.json files with new version
          if [ -f "frontend/package.json" ]; then
            echo "Updating frontend/package.json to version ${{ needs.bump-version.outputs.new_version }}"
            sed -i "s/\"version\": \".*\"/\"version\": \"${{ needs.bump-version.outputs.new_version }}\"/" frontend/package.json
            git add frontend/package.json
          fi

          if [ -f "api/package.json" ]; then
            echo "Updating api/package.json to version ${{ needs.bump-version.outputs.new_version }}"
            sed -i "s/\"version\": \".*\"/\"version\": \"${{ needs.bump-version.outputs.new_version }}\"/" api/package.json
            git add api/package.json
          fi

          # Commit and push changes
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -m "chore: bump version to ${{ needs.bump-version.outputs.new_version }}" || echo "No changes to commit"
          git push origin release/v${{ needs.bump-version.outputs.new_version }}

      - name: Trigger API Build for ${{ needs.bump-version.outputs.new_tag }}
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: start-api-build
          client-payload: '{"version": "${{ needs.bump-version.outputs.new_version }}", "tag": "${{ needs.bump-version.outputs.new_tag }}", "actor": "${{ github.actor }}", "create_release": false}'

      - name: Trigger Frontend Build for ${{ needs.bump-version.outputs.new_tag }}
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: start-frontend-build
          client-payload: '{"version": "${{ needs.bump-version.outputs.new_version }}", "tag": "${{ needs.bump-version.outputs.new_tag }}", "actor": "${{ github.actor }}", "create_release": false}'

      - name: Trigger Docker Build for ${{ needs.bump-version.outputs.new_tag }}
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: start-docker-build
          client-payload: '{"version": "${{ needs.bump-version.outputs.new_version }}", "tag": "${{ needs.bump-version.outputs.new_tag }}", "actor": "${{ github.actor }}", "create_release": false, "build_arm": false}'

      - name: Generate trigger summary
        run: |
          echo "## 🚀 Component Build Triggers" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Triggered Components" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 🖥️ **API** | ${{ needs.bump-version.outputs.new_version }} | ✅ Triggered |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 **Frontend** | ${{ needs.bump-version.outputs.new_version }} | ✅ Triggered |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 **Docker** | ${{ needs.bump-version.outputs.new_version }} | ✅ Triggered |" >> $GITHUB_STEP_SUMMARY

          echo "### ℹ️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- All components will be built with version **${{ needs.bump-version.outputs.new_version }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts will be attached to the final release" >> $GITHUB_STEP_SUMMARY
          echo "- Individual components will not create separate releases" >> $GITHUB_STEP_SUMMARY
          echo "- Build progress can be monitored in the Actions tab" >> $GITHUB_STEP_SUMMARY

  wait-for-builds:
    name: Wait for Component Builds
    needs: [bump-version, trigger-builds]
    runs-on: ubuntu-latest
    steps:
      - name: Setup GitHub CLI
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

          # Authenticate with GitHub token
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Wait for builds to complete with polling
        run: |
          echo "Waiting for component builds to complete (polling every 30 seconds)..."
          MAX_WAIT_TIME=1800  # 30 minutes maximum wait time (increased from 20)
          POLL_INTERVAL=30    # 30 seconds between checks
          ELAPSED_TIME=0
          VERSION="${{ needs.bump-version.outputs.new_version }}"

          echo "Looking for builds with version: $VERSION"
          echo "This will check API, Frontend, and Docker builds"

          # Define the function to check if workflow artifacts are ready
          check_artifacts() {
            local workflow=$1
            local message="Checking $workflow artifacts for version $VERSION"
            echo $message

            # Use the GitHub API to look for completed runs of this workflow
            # For Ubuntu compatibility, using date command without macOS-specific flags
            HOUR_AGO=$(date -u -d "1 hour ago" +"%Y-%m-%dT%H:%M:%SZ" || date -u +"%Y-%m-%dT%H:%M:%SZ")

            # Search for workflows that match our version
            gh api "repos/${{ github.repository }}/actions/workflows/$workflow/runs" \
              --jq ".workflow_runs[] | select(.status == \"completed\" and .conclusion == \"success\" and .created_at > \"$HOUR_AGO\")" > workflow_runs.json

            # Grep for our specific version to ensure we're finding the right build
            if [ -s workflow_runs.json ] && grep -q "$VERSION" workflow_runs.json; then
              echo "✅ Found completed successful $workflow run for version $VERSION"
              return 0
            else
              echo "❌ No completed successful $workflow run found yet for version $VERSION"
              return 1
            fi
          }

          # Keep checking until all builds are complete or timeout is reached
          while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ]; do
            echo "Checking build status after ${ELAPSED_TIME} seconds..."

            # Check status of each workflow
            API_DONE=1
            FRONTEND_DONE=1
            DOCKER_DONE=1

            check_artifacts "cd-build-api.yaml" && API_DONE=0
            check_artifacts "cd-build-frontend.yaml" && FRONTEND_DONE=0
            check_artifacts "cd-docker-build.yaml" && DOCKER_DONE=0

            echo "API build completed: $([ $API_DONE -eq 0 ] && echo "Yes" || echo "No")"
            echo "Frontend build completed: $([ $FRONTEND_DONE -eq 0 ] && echo "Yes" || echo "No")"
            echo "Docker build completed: $([ $DOCKER_DONE -eq 0 ] && echo "Yes" || echo "No")"

            # If all are done, we can exit
            if [ $API_DONE -eq 0 ] && [ $FRONTEND_DONE -eq 0 ] && [ $DOCKER_DONE -eq 0 ]; then
              echo "All builds are complete!"

              # Wait a bit more to ensure artifacts are fully available
              echo "Waiting 60 more seconds for artifacts to be fully available..."
              sleep 60
              exit 0
            fi

            # Sleep before next check
            echo "Not all builds are complete, checking again in $POLL_INTERVAL seconds..."
            sleep $POLL_INTERVAL
            ELAPSED_TIME=$((ELAPSED_TIME + POLL_INTERVAL))
          done

          echo "Error: Maximum wait time of $MAX_WAIT_TIME seconds reached."
          echo "The following builds have not completed:"
          [ $API_DONE -eq 1 ] && echo "- API build"
          [ $FRONTEND_DONE -eq 1 ] && echo "- Frontend build"
          [ $DOCKER_DONE -eq 1 ] && echo "- Docker build"

          echo "Release creation will be skipped to prevent incomplete artifacts."
          exit 1

  create-release:
    name: Create Release ${{ needs.bump-version.outputs.new_tag }}
    needs: [analyze-commits, bump-version, wait-for-builds]
    if: needs.analyze-commits.outputs.has_new_commits == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Download API artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: cd-build-api.yaml
          workflow_conclusion: success
          name: api-binaries
          path: ./artifacts/api
          allow_forks: false

      - name: Download Frontend artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: cd-build-frontend.yaml
          workflow_conclusion: success
          name: frontend-bundle
          path: ./artifacts/frontend
          allow_forks: false

      - name: Download Docker API artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: cd-docker-build.yaml
          workflow_conclusion: success
          name: docker-build-api
          path: ./artifacts/docker-builds/api
          allow_forks: false

      - name: Download Docker Frontend artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: cd-docker-build.yaml
          workflow_conclusion: success
          name: docker-build-frontend
          path: ./artifacts/docker-builds/frontend
          allow_forks: false

      - name: Verify all artifacts were downloaded successfully
        run: |
          echo "Verifying all required artifacts were downloaded..."

          # Check API artifacts
          API_FILES=$(find ./artifacts/api -type f | wc -l)
          if [ "$API_FILES" -eq 0 ]; then
            echo "Error: No API artifacts found"
            exit 1
          else
            echo "✅ Found $API_FILES API artifact files"
          fi

          # Check Frontend artifacts
          FRONTEND_FILES=$(find ./artifacts/frontend -type f | wc -l)
          if [ "$FRONTEND_FILES" -eq 0 ]; then
            echo "Error: No Frontend artifacts found"
            exit 1
          else
            echo "✅ Found $FRONTEND_FILES Frontend artifact files"
          fi

          # Check Docker artifacts
          DOCKER_FILES=$(find ./artifacts/docker-builds -type f | wc -l)
          if [ "$DOCKER_FILES" -eq 0 ]; then
            echo "Error: No Docker artifacts found"
            exit 1
          else
            echo "✅ Found $DOCKER_FILES Docker artifact files"
          fi

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f | sort

      - name: Set Docker Image Information
        id: docker_info
        run: |
          # Get repository owner in lowercase
          LOWERCASE_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME="web3-message-board"

          # Debug information
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Lowercase owner: $LOWERCASE_OWNER"
          echo "Repository name: $REPO_NAME"

          # Define Docker image names
          API_IMAGE="${LOWERCASE_OWNER}/${REPO_NAME}/api:${{ needs.bump-version.outputs.new_version }}"
          FRONTEND_IMAGE="${LOWERCASE_OWNER}/${REPO_NAME}/frontend:${{ needs.bump-version.outputs.new_version }}"

          # Debug expected paths
          echo "Expected API image path: ghcr.io/$API_IMAGE"
          echo "Expected Frontend image path: ghcr.io/$FRONTEND_IMAGE"
          echo "This should match what's produced by the Docker build workflow"

          # Check if any direct image paths are available
          echo "Checking for images with direct repository owner path:"
          echo "ghcr.io/${LOWERCASE_OWNER}/api:${{ needs.bump-version.outputs.new_version }}"
          echo "ghcr.io/${LOWERCASE_OWNER}/frontend:${{ needs.bump-version.outputs.new_version }}"

          # Set outputs
          echo "api_image=ghcr.io/$API_IMAGE" >> $GITHUB_OUTPUT
          echo "frontend_image=ghcr.io/$FRONTEND_IMAGE" >> $GITHUB_OUTPUT

      - name: Generate Docker configuration
        run: |
          mkdir -p ./artifacts/docker

          # Create docker-compose.yml
          cat > ./artifacts/docker/docker-compose.yml << EOF
          version: '3.8'

          services:
            frontend:
              image: ${{ steps.docker_info.outputs.frontend_image }}
              ports:
                - "3000:3000"
              environment:
                - API_URL=http://api:3001
              depends_on:
                - api

            api:
              image: ${{ steps.docker_info.outputs.api_image }}
              ports:
                - "3001:3001"
              environment:
                - DATABASE_URL=postgres://postgres:postgres@db:5432/messageboard
              depends_on:
                - db

            db:
              image: postgres:14
              environment:
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=postgres
                - POSTGRES_DB=messageboard
              volumes:
                - pg_data:/var/lib/postgresql/data

          volumes:
            pg_data:
          EOF

          # Create simple readme
          cat > ./artifacts/docker/README.md << EOF
          # Web3 Message Board Docker Deployment

          This folder contains configuration files for deploying the application using Docker.

          ## Images

          - Frontend: \`${{ steps.docker_info.outputs.frontend_image }}\`
          - API: \`${{ steps.docker_info.outputs.api_image }}\`

          ## Quick Start

          \`\`\`bash
          # Pull the images
          docker pull ${{ steps.docker_info.outputs.api_image }}
          docker pull ${{ steps.docker_info.outputs.frontend_image }}

          # Run with docker-compose
          docker-compose -f docker-compose.yml up -d
          \`\`\`

          ## Deployment Options

          ### Automatic Deployment
          You can enable automatic deployment when creating a release by setting the \`deploy_after_release\` option to \`true\`.

          ### Manual Deployment
          To deploy manually after release, run the Ansible deployment workflow with the version tag \`${{ needs.bump-version.outputs.new_tag }}\`.
          EOF

      - name: Create Release ${{ needs.bump-version.outputs.new_tag }}
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_tag }}
          name: Release ${{ needs.bump-version.outputs.new_tag }}
          generate_release_notes: true
          files: |
            ./artifacts/api/*
            ./artifacts/frontend/*
            ./artifacts/docker/*
          body: |
            ## Release Information
            - **Version:** ${{ needs.bump-version.outputs.new_tag }}
            - **Released by:** @${{ github.actor }}
            - **Type:** ${{ needs.analyze-commits.outputs.release_type }} release
            - **Date:** ${{ github.event.repository.updated_at }}

            ## Component Versions
            - **API:** ${{ needs.bump-version.outputs.new_version }}
            - **Frontend:** ${{ needs.bump-version.outputs.new_version }}

            ## Docker Images
            - **API**: `${{ steps.docker_info.outputs.api_image }}`
            - **Frontend**: `${{ steps.docker_info.outputs.frontend_image }}`

            ### Container Registry
            All images are available from GitHub Container Registry (ghcr.io)

            ```bash
            docker pull ${{ steps.docker_info.outputs.api_image }}
            docker pull ${{ steps.docker_info.outputs.frontend_image }}
            ```

            ## Release Notes
            _The following release notes are automatically generated_

      - name: Generate release summary
        run: |
          # Count artifacts for better reporting
          API_COUNT=$(find ./artifacts/api -type f | wc -l)
          FRONTEND_COUNT=$(find ./artifacts/frontend -type f | wc -l)
          TOTAL_COUNT=$((API_COUNT + FRONTEND_COUNT))

          echo "## 🎉 Release Published" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ **Version** | ${{ needs.bump-version.outputs.new_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📈 **Release Type** | ${{ needs.analyze-commits.outputs.release_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 **Released by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 **Release URL** | [${{ github.repository }}/releases/tag/${{ needs.bump-version.outputs.new_tag }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.bump-version.outputs.new_tag }}) |" >> $GITHUB_STEP_SUMMARY

          echo "### 📦 Released Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Artifacts | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

          if [ "$API_COUNT" -gt 0 ]; then
            echo "| 🖥️ **API** | $API_COUNT | ✅ Included |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🖥️ **API** | 0 | ⚠️ Missing |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$FRONTEND_COUNT" -gt 0 ]; then
            echo "| 🌐 **Frontend** | $FRONTEND_COUNT | ✅ Included |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🌐 **Frontend** | 0 | ⚠️ Missing |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "| **Total** | $TOTAL_COUNT | |" >> $GITHUB_STEP_SUMMARY

          echo "### 🚀 Deployment" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.deploy_after_release }}" == "true" ]; then
            echo "✅ **Automatic deployment enabled.** The Ansible deployment workflow will be triggered automatically." >> $GITHUB_STEP_SUMMARY
            echo "- Deployment type: ${{ github.event.inputs.deployment_type || 'ansible-deploy (full deployment)' }}" >> $GITHUB_STEP_SUMMARY

            if [ -n "${{ github.event.inputs.api_tag }}" ] || [ -n "${{ github.event.inputs.frontend_tag }}" ]; then
              echo "- Using custom component tags:" >> $GITHUB_STEP_SUMMARY

              if [ -n "${{ github.event.inputs.api_tag }}" ]; then
                echo "  - API: ${{ github.event.inputs.api_tag }}" >> $GITHUB_STEP_SUMMARY
              fi

              if [ -n "${{ github.event.inputs.frontend_tag }}" ]; then
                echo "  - Frontend: ${{ github.event.inputs.frontend_tag }}" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- Using release tag: ${{ needs.bump-version.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "To deploy this release manually, run the Ansible deployment workflow with:" >> $GITHUB_STEP_SUMMARY
            echo "- **Version tag**: ${{ needs.bump-version.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
          fi

  # ==============================================================
  # Deployment Job - Only runs if deploy_after_release is enabled
  # ==============================================================
  deploy-release:
    name: Deploy Release with Ansible
    needs: [bump-version, create-release]
    if: ${{ github.event.inputs.deploy_after_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger Ansible Deployment
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy-release
          client-payload: |
            {
              "deployment_type": "${{ github.event.inputs.deployment_type }}",
              "version_tag": "${{ needs.bump-version.outputs.new_tag }}",
              "api_version": "${{ github.event.inputs.api_tag || needs.bump-version.outputs.new_tag }}",
              "frontend_version": "${{ github.event.inputs.frontend_tag || needs.bump-version.outputs.new_tag }}",
              "triggered_by": "release-automation"
            }

      - name: Generate deployment summary
        run: |
          # Determine deployment type name
          DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"
          case "$DEPLOYMENT_TYPE" in
            ansible-deploy)
              COMPONENT="Full Infrastructure"
              ;;
            ansible-api)
              COMPONENT="API Service"
              ;;
            ansible-frontend)
              COMPONENT="Frontend Application"
              ;;
            ansible-nginx)
              COMPONENT="Nginx"
              ;;
            ansible-logging)
              COMPONENT="Logging Stack"
              ;;
            ansible-security)
              COMPONENT="Security Settings"
              ;;
            *)
              COMPONENT="Unknown Component"
              ;;
          esac

          # Create summary
          echo "## 🚀 Deployment Triggered" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 **Component** | $COMPONENT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ **Release Version** | ${{ needs.bump-version.outputs.new_tag }} |" >> $GITHUB_STEP_SUMMARY

          # Add custom tag information if provided
          if [ -n "${{ github.event.inputs.api_tag }}" ]; then
            echo "| 🖥️ **API Tag** | ${{ github.event.inputs.api_tag }} |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -n "${{ github.event.inputs.frontend_tag }}" ]; then
            echo "| 🌐 **Frontend Tag** | ${{ github.event.inputs.frontend_tag }} |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### 📝 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "✅ Ansible deployment workflow triggered successfully" >> $GITHUB_STEP_SUMMARY
          echo "📊 You can monitor the deployment progress in the Actions tab" >> $GITHUB_STEP_SUMMARY
