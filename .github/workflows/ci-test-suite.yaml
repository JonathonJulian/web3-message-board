---
name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install RustScan
        continue-on-error: true
        run: |
          # Install RustScan for security tests
          wget https://github.com/RustScan/RustScan/releases/download/2.0.1/rustscan_2.0.1_amd64.deb
          sudo dpkg -i rustscan_2.0.1_amd64.deb || true
          sudo apt-get install -f -y

      - name: Run test suite
        id: run_tests
        env:
          # Set environment variables for the test scripts
          FRONTEND_URL: "http://192.168.1.94"
          API_URL: "http://192.168.1.94"
          GRAFANA_URL: "http://grafana.local"
          LOKI_URL: "http://grafana.local/loki"
          # Use a longer timeout for GitHub Actions
          TIMEOUT: "15"
        run: |
          # Capture test output to parse for warnings and errors
          make ci-test | tee test_output.log
          # Store exit code to use later
          echo "TEST_EXIT_CODE=${PIPESTATUS[0]}" >> "$GITHUB_ENV"

      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Suite Summary" > test_summary.md

          {
            echo ""

            # Extract overall status
            if [ "${{  env.TEST_EXIT_CODE  }}" == "0" ]; then
              echo "✅ **All tests passed successfully!**"
            else
              echo "❌ **Some tests failed!**"
            fi

            echo ""
            echo "### Warnings and Issues"
            echo ""
          } >> test_summary.md

          # Extract warnings
          grep -E "⚠️|Warning|warning" test_output.log | sort | uniq > warnings.txt
          if [ -s warnings.txt ]; then
            {
              echo "Found the following warnings:"
              echo '```'
              cat warnings.txt
              echo '```'
            } >> test_summary.md
          else
            echo "No warnings found." >> test_summary.md
          fi

          {
            echo ""
            echo "### Errors"
            echo ""
          } >> test_summary.md

          # Extract errors
          grep -E "❌|Error|error|failed|Failed" test_output.log | grep -v "This may be normal" | sort | uniq > errors.txt
          if [ -s errors.txt ]; then
            {
              echo "Found the following errors:"
              echo '```'
              cat errors.txt
              echo '```'
            } >> test_summary.md
          else
            echo "No errors found." >> test_summary.md
          fi

          # Add individual test statuses
          {
            echo ""
            echo "### Individual Test Results"
            echo ""
          } >> test_summary.md

          grep -E "✅.*tests passed|❌.*tests failed" test_output.log >> test_summary.md

          cat test_summary.md

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test_output.log
            test_summary.md

      - name: Post test summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test_summary.md', 'utf8');
            await core.summary
              .addRaw(summary)
              .write();

      - name: Exit with test result
        if: always()
        run: |
          # Convert test exit code to a valid shell exit value (0 or 1)
          if [[ "${{  env.TEST_EXIT_CODE  }}" != "0" ]]; then
            echo "Tests failed with exit code ${{  env.TEST_EXIT_CODE  }}"
            exit 1
          else
            echo "Tests passed"
            exit 0
          fi
