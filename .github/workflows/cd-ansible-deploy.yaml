---
name: Ansible Deployment
run-name: |
  Deploy ${{
    inputs.deployment_type == 'ansible-deploy' && 'Full Infrastructure' ||
    inputs.deployment_type == 'ansible-nginx' && 'Nginx' ||
    inputs.deployment_type == 'ansible-frontend' && 'Frontend' ||
    inputs.deployment_type == 'ansible-logging' && 'Logging Stack' ||
    inputs.deployment_type == 'ansible-api' && 'API Service' ||
    'Unknown Component'
  }}

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Ansible deployment type'
        required: true
        type: choice
        options:
          - ansible-deploy
          - ansible-api
          - ansible-frontend
          - ansible-nginx
          - ansible-logging
          - ansible-security
      version_tag:
        description: 'Version tag to deploy (e.g. v1.0.99, include v prefix)'
        required: false
        type: string
  repository_dispatch:
    types: [deploy-release]

jobs:
  # ======================================
  # Validate the specified version tag
  # ======================================
  validate-tag:
    name: Validate Tag Exists
    runs-on: ubuntu-latest
    if: github.event.inputs.version_tag != '' || github.event.client_payload.version_tag != ''
    outputs:
      tag_exists: ${{ steps.check-tag.outputs.tag_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag exists
        id: check-tag
        run: |
          # Get the tag from inputs or client payload
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
            TAG="${{ github.event.inputs.version_tag }}"
          else
            TAG="${{ github.event.client_payload.version_tag }}"
          fi

          echo "üîç Checking if tag \"$TAG\" exists in the repository..."

          if git tag -l | grep -q "^$TAG$"; then
            echo "‚úÖ Tag \"$TAG\" exists in the repository"
            echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Tag \"$TAG\" does NOT exist in the repository"
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
            echo "::error::The specified tag \"$TAG\" does not exist in the repository. Please check the tag name and try again."
          fi

  # ======================================
  # Main deployment job
  # ======================================
  ansible-deployment:
    name: Run Ansible Deployment
    needs: validate-tag
    if: github.event.inputs.version_tag == '' || github.event.client_payload.version_tag == '' || needs.validate-tag.outputs.tag_exists == 'true'
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --------------------------------
      # Setup basic dependencies
      # --------------------------------
      - name: Setup basic dependencies
        run: |
          echo "üîß Setting up basic Ansible dependencies..."

          # Install Python and Ansible if not present
          if ! command -v ansible &> /dev/null; then
            echo "üì¶ Installing Ansible..."
            python3 -m pip install --upgrade pip
            python3 -m pip install ansible
          fi

          # Verify Ansible installation
          echo "‚úÖ Ansible version: $(ansible --version | head -n1)"

      # --------------------------------
      # Setup SSH authentication
      # --------------------------------
      - name: Setup SSH key
        run: |
          echo "üîê Setting up SSH authentication..."

          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write the SSH private key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Extract hosts from inventory file and add to known_hosts
          echo "üîÑ Adding inventory hosts to known_hosts..."
          HOSTS=$(grep -v "^\[" ansible/inventory.ini | grep -v "^#" | grep -v "^$" | awk '{print $1}')
          HOSTS_COUNT=0

          for HOST in $HOSTS; do
            if [[ "$HOST" != *"="* ]]; then
              echo "  ‚Üí Adding \"$HOST\" to known_hosts"
              ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts
              HOSTS_COUNT=$((HOSTS_COUNT+1))
            fi
          done

          echo "‚úÖ Added \"$HOSTS_COUNT\" hosts to known_hosts"

      # --------------------------------
      # Run the Ansible deployment
      # --------------------------------
      - name: Run Ansible deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANSIBLE_HOST_KEY_CHECKING: "false"
        run: |
          echo "üöÄ Starting Ansible deployment..."

          # Install Ansible dependencies if not already done
          if [ ! -f ".ansible_deps_installed" ]; then
            echo "üì¶ Installing Ansible dependencies..."
            cd ansible
            ansible-galaxy collection install -r requirements.yaml
            pip install -r requirements.txt
            cd ..
            touch .ansible_deps_installed
          fi

          # Set up deployment variables
          # Get deployment type from inputs or client payload
          if [ -n "${{ github.event.inputs.deployment_type }}" ]; then
            DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"
          else
            DEPLOYMENT_TYPE="${{ github.event.client_payload.deployment_type }}"
          fi

          EXTRA_VARS=""

          # Version tag handling
          # Get version tag from inputs or client payload
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
            VERSION_TAG="${{ github.event.inputs.version_tag }}"
          elif [ -n "${{ github.event.client_payload.version_tag }}" ]; then
            VERSION_TAG="${{ github.event.client_payload.version_tag }}"
          fi

          if [ -n "$VERSION_TAG" ]; then
            VERSION_NUMBER="${VERSION_TAG#v}"
            echo "üìå Using version tag: \"$VERSION_TAG\" (\"$VERSION_NUMBER\")"
            EXTRA_VARS="api_release_version=\"$VERSION_NUMBER\" frontend_release_version=\"$VERSION_NUMBER\""
          fi

          # Additional component-specific version handling for repository_dispatch
          if [ -n "${{ github.event.client_payload.api_version }}" ]; then
            API_VERSION="${{ github.event.client_payload.api_version }}"
            API_VERSION_NUMBER="${API_VERSION#v}"
            echo "üìå Using custom API version: \"$API_VERSION\" (\"$API_VERSION_NUMBER\")"
            EXTRA_VARS="$EXTRA_VARS api_release_version=\"$API_VERSION_NUMBER\""
          fi

          if [ -n "${{ github.event.client_payload.frontend_version }}" ]; then
            FRONTEND_VERSION="${{ github.event.client_payload.frontend_version }}"
            FRONTEND_VERSION_NUMBER="${FRONTEND_VERSION#v}"
            echo "üìå Using custom Frontend version: \"$FRONTEND_VERSION\" (\"$FRONTEND_VERSION_NUMBER\")"
            EXTRA_VARS="$EXTRA_VARS frontend_release_version=\"$FRONTEND_VERSION_NUMBER\""
          fi

          # Build the tags parameter based on deployment type
          # Extract clean tag name from deployment type (remove "ansible-" prefix)
          if [ "$DEPLOYMENT_TYPE" = "ansible-deploy" ]; then
            # Full deployment doesn't use tags
            TAG_PARAM=""
            COMPONENT="Full infrastructure"
          else
            # Extract the tag name from input (everything after "ansible-")
            TAG_NAME="${DEPLOYMENT_TYPE#ansible-}"

            # Special case for security which needs multiple tags
            if [ "$TAG_NAME" = "security" ]; then
              TAG_PARAM="--tags security,users,firewall,ssh"
            else
              TAG_PARAM="--tags ${TAG_NAME}"
            fi

            # Set component name based on the tag
            case "$TAG_NAME" in
              api)         COMPONENT="API service" ;;
              frontend)    COMPONENT="Frontend application" ;;
              nginx)       COMPONENT="Nginx" ;;
              logging)     COMPONENT="Logging stack" ;;
              security)    COMPONENT="Security settings" ;;
              *)           COMPONENT="$TAG_NAME" ;;
            esac
          fi

          echo "üéØ Deploying component: \"$COMPONENT\""

          # Set up additional extra vars and run the deployment
          ALL_EXTRA_VARS="github_token=\"$GITHUB_TOKEN\" ansible_user=ubuntu $EXTRA_VARS"

          echo "üîß Running make \"$DEPLOYMENT_TYPE\" with the following parameters:"
          echo "   ‚Üí Extra vars: github_token=*** ${EXTRA_VARS}"
          echo "   ‚Üí Tags: ${TAG_PARAM}"

          make "$DEPLOYMENT_TYPE" ANSIBLE_EXTRA_VARS="$ALL_EXTRA_VARS"

          echo "‚úÖ Deployment completed successfully"

      # --------------------------------
      # Generate deployment summary
      # --------------------------------
      - name: Deployment summary
        run: |
          # Get deployment type from inputs or client payload
          if [ -n "${{ github.event.inputs.deployment_type }}" ]; then
            DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"
          else
            DEPLOYMENT_TYPE="${{ github.event.client_payload.deployment_type }}"
          fi

          # Get version tag from inputs or client payload
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
            VERSION_TAG="${{ github.event.inputs.version_tag }}"
          elif [ -n "${{ github.event.client_payload.version_tag }}" ]; then
            VERSION_TAG="${{ github.event.client_payload.version_tag }}"
          fi

          {
            echo "## üìã Deployment Summary"
            echo "### üõ†Ô∏è Deployment Configuration"
            echo "| Setting | Value |"
            echo "| --- | --- |"
            echo "| ‚öôÔ∏è **Deployment type** | $DEPLOYMENT_TYPE |"
            echo "| üîê **Authentication method** | SSH key |"
            echo "| üë§ **User** | ubuntu |"
            echo "| üñ•Ô∏è **Target servers** | Using inventory file |"

            if [ -n "$VERSION_TAG" ]; then
              echo "| üì¶ **Version Tag** | $VERSION_TAG |"
            fi

            # Display component-specific versions if set
            if [ -n "${{ github.event.client_payload.api_version }}" ]; then
              echo "| üñ•Ô∏è **API Version** | ${{ github.event.client_payload.api_version }} |"
            fi

            if [ -n "${{ github.event.client_payload.frontend_version }}" ]; then
              echo "| üåê **Frontend Version** | ${{ github.event.client_payload.frontend_version }} |"
            fi

            echo "### üìä Deployment Status"

            case "$DEPLOYMENT_TYPE" in
              ansible-deploy)
                echo "‚úÖ **Full Ansible playbook executed**"
                ;;
              ansible-api)
                echo "‚úÖ **API service deployed**"
                ;;
              ansible-frontend)
                echo "‚úÖ **Frontend application deployed**"
                ;;
              ansible-nginx)
                echo "‚úÖ **Nginx configuration deployed**"
                ;;
              ansible-logging)
                echo "‚úÖ **Logging configuration deployed**"
                ;;
              ansible-security)
                echo "‚úÖ **Security settings deployed**"
                ;;
            esac
          } >> "$GITHUB_STEP_SUMMARY"
