---
name: Ansible Deployment
run-name: |
  Deploy ${{
    inputs.deployment_type == 'ansible-deploy' && 'Full Infrastructure' ||
    inputs.deployment_type == 'ansible-nginx' && 'Nginx' ||
    inputs.deployment_type == 'ansible-frontend' && 'Frontend' ||
    inputs.deployment_type == 'ansible-logging' && 'Logging Stack' ||
    inputs.deployment_type == 'ansible-api' && 'API Service' ||
    inputs.deployment_type == 'ansible-security' && 'Security Settings' ||
    'Unknown Component'
  }}

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Ansible deployment type'
        required: true
        type: choice
        options:
          - ansible-deploy
          - ansible-api
          - ansible-frontend
          - ansible-nginx
          - ansible-logging
          - ansible-security
      version_tag:
        description: 'Version tag to deploy (e.g. v1.0.99, include v prefix)'
        required: false
        type: string
  repository_dispatch:
    types: [deploy-release]

jobs:
  # ======================================
  # Validate the specified version tag
  # ======================================
  validate-tag:
    name: Validate Tag Exists
    runs-on: ubuntu-latest
    if: github.event.inputs.version_tag != '' || github.event.client_payload.version_tag != ''
    outputs:
      tag_exists: ${{ steps.check-tag.outputs.tag_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag exists
        id: check-tag
        run: |
          # Get the tag from inputs or client payload
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
            TAG="${{ github.event.inputs.version_tag }}"
          else
            TAG="${{ github.event.client_payload.version_tag }}"
          fi

          echo "üîç Checking if tag \"$TAG\" exists in the repository..."

          if git tag -l | grep -q "^$TAG$"; then
            echo "‚úÖ Tag \"$TAG\" exists in the repository"
            echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Tag \"$TAG\" does NOT exist in the repository"
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
            echo "::error::The specified tag \"$TAG\" does not exist in the repository. Please check the tag name and try again."
          fi

  # ======================================
  # Main deployment job
  # ======================================
  ansible-deployment:
    name: Run Ansible Deployment
    needs: validate-tag
    if: github.event.inputs.version_tag == '' || github.event.client_payload.version_tag == '' || needs.validate-tag.outputs.tag_exists == 'true'
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --------------------------------
      # Extract host IPs and scan for SSH keys
      # --------------------------------
      - name: Extract host IPs and scan SSH keys
        id: scan-hosts
        run: |
          echo "üîç Extracting host IPs from inventory..."

          # Extract all IPs from the inventory file
          IP_LIST=$(grep -oE "ansible_host=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" ansible/inventory.ini | cut -d= -f2)

          echo "Found IPs: $IP_LIST"
          echo "ip_count=$(echo "$IP_LIST" | wc -l)" >> $GITHUB_OUTPUT

          # Create a temporary file to store known_hosts entries
          KNOWN_HOSTS_FILE="known_hosts_entries.txt"
          > $KNOWN_HOSTS_FILE

          # Scan SSH keys for each IP
          echo "üîë Scanning SSH keys for hosts..."
          for IP in $IP_LIST; do
            echo "  ‚Üí Scanning $IP"
            ssh-keyscan -H "$IP" >> $KNOWN_HOSTS_FILE
          done

          KNOWN_HOSTS=$(cat $KNOWN_HOSTS_FILE)
          echo "known_hosts<<EOF" >> $GITHUB_OUTPUT
          echo "$KNOWN_HOSTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "‚úÖ Scanned SSH keys for $(echo "$IP_LIST" | wc -l) hosts"

      # --------------------------------
      # Setup SSH authentication using action
      # --------------------------------
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_ed25519
          known_hosts: ${{ steps.scan-hosts.outputs.known_hosts }}
          if_key_exists: replace

      # --------------------------------
      # Run the Ansible deployment using Makefile
      # --------------------------------
      - name: Run Ansible deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANSIBLE_HOST_KEY_CHECKING: "false"
          USE_SIMPLIFIED_SETUP: "true"
        run: |
          echo "üöÄ Starting Ansible deployment..."

          # First, install Ansible dependencies using Makefile target
          echo "üì¶ Installing Ansible dependencies..."
          make ansible-deps

          # Set up deployment variables
          # Get deployment type from inputs or client payload
          if [ -n "${{ github.event.inputs.deployment_type }}" ]; then
            DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"
          else
            DEPLOYMENT_TYPE="${{ github.event.client_payload.deployment_type }}"
          fi

          EXTRA_VARS=""

          # Version tag handling
          # Get version tag from inputs or client payload
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
            VERSION_TAG="${{ github.event.inputs.version_tag }}"
          elif [ -n "${{ github.event.client_payload.version_tag }}" ]; then
            VERSION_TAG="${{ github.event.client_payload.version_tag }}"
          fi

          if [ -n "$VERSION_TAG" ]; then
            VERSION_NUMBER="${VERSION_TAG#v}"
            echo "üìå Using version tag: \"$VERSION_TAG\" (\"$VERSION_NUMBER\")"
            EXTRA_VARS="service_release_version=\"$VERSION_TAG\" api_release_version=\"$VERSION_NUMBER\" frontend_release_version=\"$VERSION_NUMBER\" static_site_release_version=\"$VERSION_TAG\""
          fi

          # Additional component-specific version handling for repository_dispatch
          if [ -n "${{ github.event.client_payload.api_version }}" ]; then
            API_VERSION="${{ github.event.client_payload.api_version }}"
            API_VERSION_NUMBER="${API_VERSION#v}"
            echo "üìå Using custom API version: \"$API_VERSION\" (\"$API_VERSION_NUMBER\")"
            EXTRA_VARS="$EXTRA_VARS api_release_version=\"$API_VERSION_NUMBER\""
          fi

          if [ -n "${{ github.event.client_payload.frontend_version }}" ]; then
            FRONTEND_VERSION="${{ github.event.client_payload.frontend_version }}"
            FRONTEND_VERSION_NUMBER="${FRONTEND_VERSION#v}"
            echo "üìå Using custom Frontend version: \"$FRONTEND_VERSION\" (\"$FRONTEND_VERSION_NUMBER\")"
            EXTRA_VARS="$EXTRA_VARS frontend_release_version=\"$FRONTEND_VERSION_NUMBER\""
          fi

          # Map deployment_type to Makefile target
          MAKE_TARGET=""
          case "$DEPLOYMENT_TYPE" in
            ansible-deploy)
              MAKE_TARGET="ansible-deploy"
              COMPONENT="Full infrastructure"
              ;;
            ansible-api)
              MAKE_TARGET="ansible-api"
              COMPONENT="API service"
              ;;
            ansible-frontend)
              MAKE_TARGET="ansible-frontend"
              COMPONENT="Frontend application"
              ;;
            ansible-nginx)
              MAKE_TARGET="ansible-nginx"
              COMPONENT="Nginx"
              ;;
            ansible-logging)
              MAKE_TARGET="ansible-logging"
              COMPONENT="Logging stack"
              ;;
            ansible-security)
              MAKE_TARGET="ansible-security"
              COMPONENT="Security settings"
              ;;
            *)
              echo "‚ùå Unknown deployment type: $DEPLOYMENT_TYPE"
              exit 1
              ;;
          esac

          echo "üéØ Deploying component: \"$COMPONENT\" with Makefile target: \"$MAKE_TARGET\""

          # Set up all extra vars including GitHub token
          ALL_EXTRA_VARS="github_token=\"$GITHUB_TOKEN\" ansible_user=ubuntu $EXTRA_VARS"

          echo "üîß Running make \"$MAKE_TARGET\" with extra vars"
          echo "   ‚Üí Extra vars: github_token=*** ${EXTRA_VARS}"

          # Run the deployment using the Makefile target
          set -x  # Print commands as they execute
          make "$MAKE_TARGET" ANSIBLE_EXTRA_VARS="$ALL_EXTRA_VARS"
          MAKE_EXIT_CODE=$?
          set +x  # Disable command printing

          if [ $MAKE_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Deployment failed with exit code $MAKE_EXIT_CODE"
            echo "::error::Deployment failed with exit code $MAKE_EXIT_CODE"
            exit $MAKE_EXIT_CODE
          fi

          echo "‚úÖ Deployment completed successfully"

      # --------------------------------
      # Generate deployment summary
      # --------------------------------
      - name: Deployment summary
        run: |
          # Get deployment type from inputs or client payload
          if [ -n "${{ github.event.inputs.deployment_type }}" ]; then
            DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"
          else
            DEPLOYMENT_TYPE="${{ github.event.client_payload.deployment_type }}"
          fi

          # Get version tag from inputs or client payload
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
            VERSION_TAG="${{ github.event.inputs.version_tag }}"
          elif [ -n "${{ github.event.client_payload.version_tag }}" ]; then
            VERSION_TAG="${{ github.event.client_payload.version_tag }}"
          fi

          {
            echo "## üìã Deployment Summary"
            echo "### üõ†Ô∏è Deployment Configuration"
            echo "| Setting | Value |"
            echo "| --- | --- |"
            echo "| ‚öôÔ∏è **Deployment type** | $DEPLOYMENT_TYPE |"
            echo "| üîê **Authentication method** | SSH key |"
            echo "| üë§ **User** | ubuntu |"
            echo "| üñ•Ô∏è **Target servers** | Using inventory file |"

            if [ -n "$VERSION_TAG" ]; then
              echo "| üì¶ **Version Tag** | $VERSION_TAG |"
            fi

            # Display component-specific versions if set
            if [ -n "${{ github.event.client_payload.api_version }}" ]; then
              echo "| üñ•Ô∏è **API Version** | ${{ github.event.client_payload.api_version }} |"
            fi

            if [ -n "${{ github.event.client_payload.frontend_version }}" ]; then
              echo "| üåê **Frontend Version** | ${{ github.event.client_payload.frontend_version }} |"
            fi

            echo "### üìä Deployment Status"

            case "$DEPLOYMENT_TYPE" in
              ansible-deploy)
                echo "‚úÖ **Full Ansible playbook executed**"
                ;;
              ansible-api)
                echo "‚úÖ **API service deployed**"
                ;;
              ansible-frontend)
                echo "‚úÖ **Frontend application deployed**"
                ;;
              ansible-nginx)
                echo "‚úÖ **Nginx configuration deployed**"
                ;;
              ansible-logging)
                echo "‚úÖ **Logging configuration deployed**"
                ;;
              ansible-security)
                echo "‚úÖ **Security settings deployed**"
                ;;
            esac
          } >> "$GITHUB_STEP_SUMMARY"
